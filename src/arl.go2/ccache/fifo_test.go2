package ccache

import (
	"testing"
)

func Test_queue(t *testing.T) {
	q := queue(int){q: make([]int, 0, 4)}

	for i := 0; i < 8; i++ {
		q.push(i)
	}

	for i := 0; i < 8; i++ {
		v, ok := q.pop()
		if !ok {
			t.Fatalf("q.pop(), queue should not be empty")
		}
		if v != i {
			t.Fatalf("q.pop() = (%v, true), want (%v, true)", v, i)
		}
	}

	// should be empty now
	v, ok := q.pop()
	if ok {
		t.Fatalf("q.pop(), queue should be empty, got (%v, true)", v)
	}

	v, ok = q.front()
	if ok {
		t.Fatalf("q.front(), queue should be empty, got (%v, true)", v)
	}

	q.push(1)
	q.push(2)

	v, ok = q.front()
	if !ok || v != 1 {
		t.Fatalf("q.front() = (%v, %v), want (1, true)", v, ok)
	}
}

func TestFIFO(t *testing.T) {
	f := NewFIFO(int)(4)
	f.Insert(0)
	f.Insert(1)
	f.Insert(2)
	f.Insert(3)

	v, ok := f.Candidate()
	if !ok || v != 0 {
		t.Fatalf("f.Candidate() = (%v, %v), want (0, true)", v, ok)
	}

	const dummy = 0xbaadcafe

	f.Remove(dummy)
	v, ok = f.Candidate()
	if !ok || v != 1 {
		t.Fatalf("f.Candidate() = (%v, %v), want (1, true)", v, ok)
	}

	f.Insert(4)
	f.Insert(5)
	v, ok = f.Candidate()
	if !ok || v != 2 {
		t.Fatalf("f.Candidate() = (%v, %v), want (2, true)", v, ok)
	}

	f.Remove(dummy)
	f.Remove(dummy)
	f.Remove(dummy)
	f.Remove(dummy)

	v, ok = f.Candidate()
	if ok {
		t.Fatalf("f.Candidate() = (%v, %v), want empty FIFO (0, false)", v, ok)
	}
}
