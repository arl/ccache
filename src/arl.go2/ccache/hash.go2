package ccache

import (
	"fmt"
	"hash/maphash"
	"sync"
)

// castTo casts t from interface{} to T.
func castTo(type T)(t interface{}) T { return t.(T) }

// hashFunction returns a hash function specific for K
func hashFunction(type K comparable)() func(K) uint64 {
	mh := &maphash.Hash{}

	var v K
	switch (interface{})(v).(type) {
	case int:
		h := IntHash{Mh: mh}
		return castTo(func(K) uint64)(h.Hash)
	// case int64:
	// 	return castTo(func(K) uint64)(Int64Hash)
	case string:
		h := StringHash{Mh: mh}
		return castTo(func(K) uint64)(h.Hash)
	default:
		panic(fmt.Sprintf("hash function unimplemented for type %T", v))
	}
}

type IntHash struct {
	sync.Mutex
	Mh *maphash.Hash
}

func (h *IntHash) Hash(i int) uint64 {
	h.Lock()
	defer h.Unlock()

	b := []byte{byte(0xff & i), byte(0xff & (i >> 8)),
		byte(0xff & (i >> 16)), byte(0xff & (i >> 24)),
	}

	h.Mh.Reset()
	h.Mh.Write(b)

	return h.Mh.Sum64()
}

type Int64Hash struct {
	sync.Mutex
	Mh *maphash.Hash
}

func (h *Int64Hash) Hash(i int64) uint64 {
	h.Lock()
	defer h.Unlock()

	b := []byte{byte(0xff & i), byte(0xff & (i >> 8)),
		byte(0xff & (i >> 16)), byte(0xff & (i >> 24)),
	}

	h.Mh.Reset()
	h.Mh.Write(b)

	return h.Mh.Sum64()
}

type StringHash struct {
	sync.Mutex
	Mh *maphash.Hash
}

func (h *StringHash) Hash(k string) uint64 {
	h.Lock()
	defer h.Unlock()

	h.Mh.Reset()
	h.Mh.WriteString(k)

	return h.Mh.Sum64()
}
