package ccache

import (
	"fmt"
	"hash/maphash"
)

// hashFunction returns a hash function specific for K
func hashFunction(type K comparable)() (func(*maphash.Hash, interface{}) uint64, error) {
	var (
		k    interface{}
		zero K
	)
	k = zero
	switch k.(type) {
	case int:
		return IntHash, nil
	case int64:
		return Int64Hash, nil
	case []byte:
		return BytesHash, nil
	case string:
		return StringHash, nil
	}
	return nil, fmt.Errorf("no hash function defined for %T", zero)
}

func IntHash(mh *maphash.Hash, k interface{}) uint64 {
	i := k.(int)
	b := []byte{byte(0xff & i), byte(0xff & (i >> 8)),
		byte(0xff & (i >> 16)), byte(0xff & (i >> 24)),
	}

	mh.Reset()
	mh.Write(b)

	return mh.Sum64()
}

func Int64Hash(mh *maphash.Hash, k interface{}) uint64 {
	i := k.(int64)
	b := []byte{byte(0xff & i), byte(0xff & (i >> 8)),
		byte(0xff & (i >> 16)), byte(0xff & (i >> 24)),
	}

	mh.Reset()
	mh.Write(b)

	return mh.Sum64()
}

func BytesHash(mh *maphash.Hash, k interface{}) uint64 {
	mh.Reset()
	mh.Write(k.([]byte))

	return mh.Sum64()
}

func StringHash(mh *maphash.Hash, k interface{}) uint64 {
	mh.Reset()
	mh.WriteString(k.(string))

	return mh.Sum64()
}
